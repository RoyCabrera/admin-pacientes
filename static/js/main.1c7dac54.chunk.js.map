{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2MA0FeA,EAvFI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAIFC,mBAAS,CACnCC,QAAQ,GACRC,YAAY,GACZC,MAAM,GACNC,KAAK,GACLC,SAAS,KATmB,mBAIzBC,EAJyB,KAIpBC,EAJoB,OAYAP,oBAAS,GAZT,mBAYzBQ,EAZyB,KAYnBC,EAZmB,KAgBzBR,EAA2CK,EAA3CL,QAAQC,EAAmCI,EAAnCJ,YAAYC,EAAuBG,EAAvBH,MAAMC,EAAiBE,EAAjBF,KAAKC,EAAYC,EAAZD,SAIhCK,EAAkB,SAACC,GAErBJ,EAAe,eACRD,EADO,eAETK,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,UAmCjC,OACI,kBAAC,WAAD,KACI,0CAECN,EAAQ,uBAAGO,UAAU,gBAAb,qCAAmE,KAE5E,0BAAMC,SApCK,SAACL,GAEhBA,EAAEM,iBAEoB,KAAnBhB,EAAQiB,QAAwC,KAAvBhB,EAAYgB,QAAkC,KAAjBf,EAAMe,QAAiC,KAAhBd,EAAKc,QAAqC,KAApBb,EAASa,QAK/GT,GAAgB,GAChBH,EAAKa,GAAKC,cAKVrB,EAAUO,GACVC,EAAe,CACXN,QAAQ,GACRC,YAAY,GACZC,MAAM,GACNC,KAAK,GACLC,SAAS,MAhBTI,GAAgB,KAgCZ,iDACA,2BAAOY,KAAK,OAAOR,KAAK,UAAUE,UAAU,eAAeO,YAAY,iBAAiBC,SAAUb,EAAiBI,MAAOb,IAE1H,sDACA,2BAAOoB,KAAK,OAAOR,KAAK,cAAcE,UAAU,eAAeO,YAAY,gCAA6BC,SAAUb,EAAiBI,MAAOZ,IAE1I,wCACA,2BAAOmB,KAAK,OAAOR,KAAK,QAAQM,GAAG,GAAGJ,UAAU,eAAeQ,SAAUb,EAAiBI,MAAOX,IAEjG,uCACA,2BAAOkB,KAAK,OAAOR,KAAK,OAAOM,GAAG,GAAGJ,UAAU,eAAeQ,SAAUb,EAAiBI,MAAOV,IAEhG,2CACA,8BAAUS,KAAK,WAAWE,UAAU,eAAeQ,SAAUb,EAAgBI,MAAOT,IAEpF,4BAAQgB,KAAK,SAASN,UAAU,+BAAhC,mBChEDS,EAlBF,SAAC,GAAyB,IAAxBlB,EAAuB,EAAvBA,KAAKmB,EAAkB,EAAlBA,aAETxB,EAA2CK,EAA3CL,QAAQC,EAAmCI,EAAnCJ,YAAYC,EAAuBG,EAAvBH,MAAMC,EAAiBE,EAAjBF,KAAKC,EAAYC,EAAZD,SAEtC,OACI,yBAAKU,UAAU,QACX,uCAAY,8BAAOd,IACnB,2CAAgB,8BAAOC,IACvB,qCAAU,8BAAOC,IACjB,oCAAS,8BAAOC,IAChB,wCAAa,8BAAOC,IAEpB,4BAAQU,UAAU,+BAA+BW,QAAU,kBAAID,EAAanB,EAAKa,MAAjF,cC+CGQ,MAzDf,WAGE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAEhDJ,IACHA,EAAiB,IANN,MAWiB5B,mBAAS4B,GAX1B,mBAWNK,EAXM,KAWCC,EAXD,KAabC,qBAAU,WACJP,EACFG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAE9C,CAACJ,EAAOL,IAIX,IAIMH,EAAe,SAACN,GACpB,IAAMmB,EAAcL,EAAMM,QAAO,SAACjC,GAAD,OAAUA,EAAKa,KAAOA,KAEvDe,EAAaI,IAGTE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAIrD,OACE,kBAAC,WAAD,KACE,0DACA,yBAAK1B,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAYhB,UApBJ,SAACO,GACjB4B,EAAa,GAAD,mBAAKD,GAAL,CAAY3B,SAqBlB,yBAAKS,UAAU,mBACb,4BAAKyB,GACJP,EAAMS,KAAI,SAACpC,GAAD,OACT,kBAAC,EAAD,CAAMqC,IAAKrC,EAAKa,GAAIb,KAAMA,EAAMmB,aAAcA,YCxCxCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLqD,QAAQrD,MAAMA,EAAMsD,a","file":"static/js/main.1c7dac54.chunk.js","sourcesContent":["import React,{Fragment,useState} from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Formulario = ({crearCita}) => {\n\n    /****************** HOOKS ************************* */  \n\n    const [cita,actualizarCita] = useState({\n        mascota:'',\n        propietario:'',\n        fecha:'',\n        hora:'',\n        sintomas:''\n    });\n\n    const [error,actualizarError] = useState(false);\n\n    /****************** EXTRAER VALORES ************************* */  \n\n    const {mascota,propietario,fecha,hora,sintomas} = cita; // ARRAY DESTRUCTURING\n\n    /****************** FUNCIONES ************************* */  \n\n    const actualizarState = (e) => {\n        \n        actualizarCita({\n            ...cita, // SPREED OPERATOR \n            [e.target.name]:e.target.value // ARRAY DESTRUCTURING\n        })\n        \n    }\n\n    const submitCita = (e) =>{\n        \n        e.preventDefault();\n        \n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\n            actualizarError(true);\n            return;\n        }\n\n        actualizarError(false);\n        cita.id = uuidv4();\n\n\n        //crear cita\n\n        crearCita(cita);\n        actualizarCita({\n            mascota:'',\n            propietario:'',\n            fecha:'',\n            hora:'',\n            sintomas:''\n        })\n        \n    }\n\n    \n\n    /****************** COMPONENTE ************************* */  \n    \n    return(\n        <Fragment>\n            <h2>Crear Cita</h2>\n\n            {error ? <p className='alerta-error'>Todos los campos son obligatorios</p>: null }\n\n            <form onSubmit={submitCita} >\n                <label>Nombre Mascota</label>\n                <input type=\"text\" name=\"mascota\" className='u-full-width' placeholder='Nombre Mascota' onChange={actualizarState} value={mascota} />\n\n                <label>Propietario Mascota</label>\n                <input type=\"text\" name=\"propietario\" className='u-full-width' placeholder='Nombre dueÃ±o de la mascota' onChange={actualizarState} value={propietario} />\n\n                <label>Fecha</label>\n                <input type=\"date\" name=\"fecha\" id=\"\" className='u-full-width' onChange={actualizarState} value={fecha}/>\n\n                <label>Hora</label>\n                <input type=\"time\" name=\"hora\" id=\"\" className='u-full-width' onChange={actualizarState} value={hora} />\n\n                <label>Sintomas</label>\n                <textarea name=\"sintomas\" className='u-full-width' onChange={actualizarState}value={sintomas} ></textarea>\n\n                <button type=\"submit\" className='u-full-width button-primary' >Agregar Cita</button>\n            </form>\n        </Fragment>\n    );\n};\n\nexport default Formulario;\n","import React from 'react';\n\nconst Cita = ({cita,eliminarCita}) => {\n\n    const {mascota,propietario,fecha,hora,sintomas} = cita\n    \n    return(\n        <div className=\"cita\">\n            <p>Mascota: <span>{mascota}</span></p>\n            <p>Propietario: <span>{propietario}</span></p>\n            <p>Fecha: <span>{fecha}</span></p>\n            <p>Hora: <span>{hora}</span></p>\n            <p>Sintomas: <span>{sintomas}</span></p>\n\n            <button className=\"button eliminar u-full-width\" onClick={ ()=>eliminarCita(cita.id) }>Eliminar</button>\n        </div>\n        \n    )\n}\n\nexport default Cita;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\nfunction App() {\n\n\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  /****************** HOOKS ************************* */\n\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n\n  /****************** FUNCIONES ************************* */\n\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n\n    guardarCitas(nuevasCitas);\n  };\n\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus citas\";\n\n  /****************** COMPONENTE ************************* */\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}